{
  "hash": "a4c1242b5501f4fb12b6d777ad5e9ba5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lotka-Volterra Competition (Part 2)\"\ndescription: \"Messing around with something\"\nimage: \"competitiondeux.png\"\ncategories: [\"Tutorial\"]\ntoc: true\ndraft: false\ncache: true\nfreeze: auto\ntitle-block-banner: true\ndate: 2/1/2025\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## Premise\n\nOk, so from my last blog post on the [Lotka-Volterra competition](tab:Lotka-Volterra Competition Model in Motion\n), I was wondering what would happen if I change my competition parameters over time- how would the dynamics change? Just some code for my future self.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(reshape2)\nlibrary(viridis)\n```\n:::\n\n\n\nAgain, look at my previous post, but I modified the functions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# c_df is a data.frame containing the competition coefficients above\n# N1_0 is the initial population for N1\n# N2_0 is the initial population for N2\n# timestep is how long we want ot run it for\n\n\nLV_func <- function(c_df, N1_0, N2_0, timestep) {\n  # Generate a matrix to keep our records\n  pop_mat <- matrix(0, nrow = timestep, ncol = 3)\n  pop_mat[, 1] <- seq(1, timestep)\n  pop_mat[1, 2] <- N1_0 # initial first population\n  pop_mat[1, 3] <- N2_0 # initial second population\n\n  ### Competition coefficient\n  c_11_v <- c_df[\"c_11\"]\n  c_12_v <- c_df[\"c_12\"]\n  c_22_v <- c_df[\"c_22\"]\n  c_21_v <- c_df[\"c_21\"]\n\n  r <- 0.01 # Intrinsic growth rate is same for all species\n\n  for (t in seq(1, timestep - 1)) {\n    c_11 <- c_11_v[t, ]\n    c_12 <- c_12_v[t, ]\n    c_22 <- c_22_v[t, ]\n    c_21 <- c_21_v[t, ]\n\n    N1 <- pop_mat[t, 2] # Get the current population sizes\n    N2 <- pop_mat[t, 3]\n\n    N1_change <- r * N1 * (1 - (c_11 * N1 + c_21 * N2))\n    N2_change <- r * N2 * (1 - (c_22 * N2 + c_12 * N1))\n\n    pop_mat[t + 1, 2] <- N1 + N1_change\n    pop_mat[t + 1, 3] <- N2 + N2_change\n  }\n  return(pop_mat)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntimestep <- 100\n\nN12_0 <- expand.grid(\n  N1 = seq(1, 200, length = 15),\n  N2 = seq(1, 200, length = 15)\n)\n\n\nc_11_vec <- seq(1e-2, 1e-2 * 0.25, length = timestep)\n\nc_df <- data.frame(\n  time = seq(1, timestep),\n  c_11 = c_11_vec,\n  c_22 = rep(1e-2, timestep),\n  c_12 = rep(5e-3, timestep),\n  c_21 = rep(4e-3, timestep)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nN12_full <- do.call(\n  rbind.data.frame,\n  apply(N12_0, 1, function(x) {\n    LV_func(\n      c_df,\n      x[\"N1\"],\n      x[\"N2\"],\n      timestep = timestep\n    )\n  },\n  simplify = FALSE\n  )\n)\n### Add an id\nN12_full$id <- rep(seq(1, nrow(N12_0)), each = timestep)\ncolnames(N12_full) <- c(\"time\", \"N1\", \"N2\", \"id\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nisocline_N1 <- function(c_df, timestep) {\n  ab <- as.numeric(seq(0, 200))\n\n  ### Competition coefficient\n  c_11_v <- c_df[\"c_11\"]\n  c_21_v <- c_df[\"c_21\"]\n\n  isocline_change_df <- NULL\n  for (t in seq(1, timestep)) {\n    c_11 <- c_11_v[t, ]\n    c_21 <- c_21_v[t, ]\n\n    isocline <- (1 - (c_21 * ab)) / c_11\n\n    isocline_change_df[[t]] <- cbind.data.frame(N1 = isocline, N2 = ab, time = as.numeric(t))\n  }\n  full <- do.call(rbind, isocline_change_df)\n  return(full)\n}\n\n\nisocline_N2 <- function(c_df, timestep) {\n  ab <- as.numeric(seq(0, 200))\n\n  ### Competition coefficient\n  c_22_v <- c_df[\"c_22\"]\n  c_12_v <- c_df[\"c_12\"]\n\n  isocline_change_df <- NULL\n  for (t in seq(1, timestep)) {\n    c_22 <- c_22_v[t, ]\n    c_12 <- c_12_v[t, ]\n\n    isocline <- (1 - (c_12 * ab)) / c_22\n\n    isocline_change_df[[t]] <- cbind.data.frame(N1 = ab, N2 = isocline, time = as.numeric(t))\n  }\n  full <- do.call(rbind, isocline_change_df)\n  return(full)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nisocline1 <- isocline_N1(c_df, timestep)\nisocline2 <- isocline_N2(c_df, timestep)\n```\n:::\n\n\n\n\n\nThat is super-neato!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslate + geom_path(\n  data = N12_full,\n  aes(x = N1, y = N2, group = id, color = time), size = 0.9, alpha = 0.8\n) +\n  transition_reveal(time) +\n  theme_classic() +\n  scale_color_viridis(option = \"plasma\") +\n  ease_aes(\"cubic-in-out\")\n```\n\n::: {.cell-output-display}\n![](Untitled_files/figure-html/unnamed-chunk-8-1.gif)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}