---
title: "Simulating ecology models: A series of tutorial"
subtitle: "Population growth: discrete and continuous"
author: "Damie Pak"
image: "rabbithead.jpg"
categories: ["Code","Tutorial"]
toc: true
draft: false
cache: true
---

## Introduction

```{r}
library(ggplot2)
library(viridis)
```

This is a simple series for those new to R and modeling ecological models. These series go through the mathematics and the code necessary to simulate some models. This is catered towards someone with experience with ecology but would like a casual introduction to simulation.

## Let's start at the very beginning

A very good place to start is with population growth. Ecologists are fascinated by the rise and fall in the organism's numbers. The simplest question an ecologist may start with: *"If I have these initial number of organisms, and each produce this number of offspring, what should the total population be some time later?"*

Differential equation models are in continuous time which means that the change in the population happens in the small time units. Think of a second, now think of a nanosecond, and think the smallest proportion of that time- the population is changing even within that tiny little time-frame. That may seem far-fetched and for species that reproduce once per season, we should be resorting to discrete time. Generally, people are better about thinking of population growth in discrete time where with each discrete time-step (a day, a week, a month) there is an increase in the population.

Let us say that our organisms of interest are female rabbits and we describe their population size at time $t$ as $N_t$. Assume that every with each time step, each rabbit births the same number of new rabbits! This parameter is the birth rate $b$. If we have the initial founding number as $N_0$ then we can write that the next time step as:

$$
N_{1} = N_0 + bN_0.
$$

For example, if there was originally 5 adults ($N_0 = 5$) and each produces 5 rabbits ($b = 5$), then we will have 25 new adults.  Adding both parents and children, we have  $N_1 = 5 + (25) = 30$ Here, we assume that the offspring are adults pretty much instantly. What does this look like for $t = 2$? 

$$
N_{2} = N(1) + 5N(1)
$$
If we substitute $N(1) = 30$, then we have $N_2 = 30 + 150 = 180$. It is extremely tedious of having to write each time-step seperately (imagine having to do this for a 100 timesteps!) 

By rearranging the equation, we can see (try it out first!)

$$
N_{1} = N_0(1 + b)
$$

$$
N_{2} = N_{1}(1 + b)
$$

This suggests that:

$$
N_{2} = N_0(1+b)(1+b)
$$

So how about $N_{3}$ ?

$$
N_{3} = N_{2} (1+b)
$$

Which then is equivalent to:

$$
N_{3} = N_0(1+b)(1+b)(1+b).
$$

That's interesting! We basically just need to know the initial starting value ($N_0$) and we can raise the (1+b) to the power of the time! Here's a visual cue if you need a bit more help:



But to predict the number of rabbits at time $t$, we simply need to know the initial abundance ($N_0$) and the birth rate ($b$) 
$$
N_t = N_0(1+b)^t
$$

### Coding

Let's write a simple code. Please skip to the next section if you are comfortable with creating R functions. Hopefully, my little code will help transition into using desolve. Lets go step by step. Personally, I think beginners should start with learning functions as quickly as possible.

So how do you design a function for doing simulations? First, what do you want for your inputs? What are the parts of the model you want to vary? Well, time seems to make the most sense. Maybe I'm interested in seeing what happens in a week... or a thousand years later. The initial rabbit population ($N_0$) can also vary as well as the birth rate! So for the input of the function, you should include the parameters that you're interested in varying.

```{r}
rabbit_growth <- function(time, initial, b){
  
  ###Insert model here
}

```

So I have a function called "rabbit_growth" and I wrote in a function that includes time, initial value, and the birth rate as input. Ideally, we should be able to feed different values and get different outputs out.

Now what do we want for the output? For simulation output, we want something that has the time and the abundance at that time. So 'time' is the number of days we are interested in projecting. Let's say we want 20 days. We can then create a vector called timesteps that goes from 0 to 20, in an increment of a day. Now we have the equation where initial describes $N_0$, the birth rate (b), and we can raise it to the power of the timesteps. So $N_0 * (1+b)$ will you give a single numeric value. But multiplying it by a vector, R is smart to know that you want to multiply $N_0 *(1+b)$ to each element of the vector. For example:

```{r}

timesteps = seq(0,20)
print(timesteps)
```


```{r}
print(paste("Single number:", 5 * (1+5))) # single numeric number #vector
```

```{r}
5 * (1+5)^(timesteps) # a vector
```

```{r}
rabbit_growth <- function(time, initial, b){

  timesteps =  seq(0,time)
  
  abundance  = initial * (1+b)^(timesteps)
    
  ###Try to keep the parameter that you are varying as a column for easier analysis 
  rabbit_df <- data.frame(time = timesteps, abundance = abundance,
                          initial = initial, b = b)
    
  return(rabbit_df)
  }
  
```

Here, I solve the equation and put it in a data.frame with the time, abundance, initial value, and birth rate.

There are many, many ways to solve this. Some people do for-loops!

```{r}
standard_rabbit <- rabbit_growth(10,5, 1)
print(standard_rabbit)
```

IF you want to do it using for-loop, this is a perfect exercise for it! Now let's plot it. I'm a ggplot lover, so we're going to use ggplot2 (for tutorial on ggplot2, check):

```{r}
ggplot(standard_rabbit, aes(x = time, y = abundance))+ geom_point() + geom_line() + xlab("Time") + ylab("Abundance") + 
  theme_minimal()
```

Now what if we want to create a lot of different plots? So there will be a much faster way that I will show you in another part, but let's do this for right now. Keeping everything else the same, let's change $b$ (the third input in the function "rabbit_growth") and create a full data.frame.

```{r}
standard_rabbit1 <- rabbit_growth(10,5, 1)
standard_rabbit2 <- rabbit_growth(10,5, 2)
standard_rabbit3 <- rabbit_growth(10,5, 3)

standard_rabbit_all <- rbind(standard_rabbit1,standard_rabbit2, 
                             standard_rabbit3)
```

```{r}
ggplot(standard_rabbit_all, aes(x = time, y= abundance, color = as.factor(b), group = as.factor(b))) + geom_point() + geom_line() +
  xlab("Time") + ylab("Abundance")+
  scale_color_viridis(discrete = TRUE, name = "b",option = 'turbo')+
  theme_minimal()
```

Wow you can see how drastically the population can grow depending on b!

Congratulations, you made your first simulation using one of the oldest model of growth!

## Discrete to Continuous 

Now how does this relate to the continuous model? The secret is that the continuous model is just the discrete model but we're making the time step smaller and smaller. Here's a thought experiment, here I'm assuming that the rabbit is expanding day by day. Why not  nothing about this model that's stopping me from stopping of thinking of growth every... hour, minute, second, and nanosecond.

## Discrete to continuous

So how does the step to discrete to continuous happen?

$$ N\_{t+1} - N_t = \Delta T \space b \space N_t $$

$$
\frac{N_{t+1} - N_t}{\Delta t} = {bN_t} 
$$

$$\frac{dN}{dt} = {bN_t} $$

## The exponential model

Here, the exponential model returns. Wildly popular, wildly unrealistic, and appears in many aspects. It is the intro ecology student's first introduction to population growth models.

Let's say we have a per-capita growth rate of 5 new rabbits per rabbit per time. In other words:

\$\$

\$\$

That means that $r = 5$

So what does that mean? We know that

$$
\frac{dN}{dt} = 
$$

How to solve it? So there's an entire textbook of solving differential equations:

$$
N(t) = N_0 e^{r(t)}
$$ So aha, we found the analytical solution (which honestly would many models especailly as they become more and more complicated are less likely to have a clean solution).

Most of the time we have to numerically solve it! Which would be the next section!
